#pragma checksum "C:\Users\zbysl\source\repos\BlurApp\BlurApp\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a3446676123a2cee876c1c9f822d46c3181b2912"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(BlurApp.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace BlurApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\zbysl\source\repos\BlurApp\BlurApp\Pages\_ViewImports.cshtml"
using BlurApp;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a3446676123a2cee876c1c9f822d46c3181b2912", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"38f7d39d88dea0a3853ee27eb09c90951bcd6d5e", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\zbysl\source\repos\BlurApp\BlurApp\Pages\Index.cshtml"
  
    ViewData["Title"] = "Blur Detector";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container"">
    <label>Detection level</label>
    <input type=""number"" class=""detect"" value=""20"" name=""detectlevel"" max=""100"" onchange=""ChangeVal(this.value)""/>
    <br/>
    <label>Image</label>
    <input type=""file"" name=""file"" accept=""image/*"" class=""image-input""/>
    <button class=""btn btn-success"" onclick=""AnalizeImage()"">Sprawd≈∫</button>
    <br/>
    <h3 class=""blur-info""></h3>
    <image class=""source-img""/>
</div>
");
            WriteLiteral(@"    <script type=""text/javascript"">
        let detectEl = document.querySelector('.detect');
        let detectionLevel;
        ChangeVal = (val) => {
            detectEl.value = val;
            detectionLevel = val;
        }
        AnalizeImage = () => {
            detectionLevel = detectEl.value;
                let imgEl = document.querySelector('.source-img');
                let input = document.querySelector('.image-input');
                if (input.files[0]) {
                    imgEl.src = URL.createObjectURL(input.files[0]);
                    imgEl.onload = () =>{
                        console.log(""img exist"");
                        let src = cv.imread(imgEl);
                        let dst = new cv.Mat();
                        let men = new cv.Mat();
                        let menO = new cv.Mat();
                        cv.cvtColor(src, src, cv.COLOR_RGB2GRAY, 0);
                        // You can try more different parameters
                        var t =");
            WriteLiteral(@" cv.Laplacian(src, dst, cv.CV_64F, 1, 1, 0, cv.BORDER_DEFAULT);
                        console.log(t, cv.meanStdDev(dst, menO, men), menO.data64F[0], men.data64F[0]);
                        console.log(detectionLevel);
                        if (men.data64F[0] < detectionLevel)
                            document.querySelector('.blur-info').textContent = ""Image is Blurred"";
                        else
                            document.querySelector('.blur-info').textContent = ""Image is not Blurred"";
                        src.delete(); dst.delete();
                    }
                }
                else {
                    console.log(""yes"")
                }
        }
        onOpenCvReady = () => {
            console.log(""openCv exist"");
        }
    </script>
");
            WriteLiteral("    <script src=\"./js/opencv.js\" onload=\"onOpenCvReady();\" type=\"text/javascript\"></script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
